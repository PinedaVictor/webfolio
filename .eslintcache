[{"/Users/victorpineda/repos/webfolio/src/index.tsx":"1","/Users/victorpineda/repos/webfolio/src/reportWebVitals.ts":"2","/Users/victorpineda/repos/webfolio/src/App.tsx":"3","/Users/victorpineda/repos/webfolio/src/Pages/Home.tsx":"4","/Users/victorpineda/repos/webfolio/src/Components/Parallax.tsx":"5","/Users/victorpineda/repos/webfolio/src/Components/ui/Layout.tsx":"6","/Users/victorpineda/repos/webfolio/src/Components/sections/index.ts":"7","/Users/victorpineda/repos/webfolio/src/Components/sections/Hero.tsx":"8","/Users/victorpineda/repos/webfolio/src/Components/sections/Projects.tsx":"9","/Users/victorpineda/repos/webfolio/src/Components/sections/Header.tsx":"10","/Users/victorpineda/repos/webfolio/src/Components/sections/Dexterity.tsx":"11","/Users/victorpineda/repos/webfolio/src/Components/sections/Contact.tsx":"12","/Users/victorpineda/repos/webfolio/src/Components/ui/Drawer.tsx":"13","/Users/victorpineda/repos/webfolio/src/Components/ui/ProjectCard.tsx":"14","/Users/victorpineda/repos/webfolio/src/Data/projects/index.ts":"15","/Users/victorpineda/repos/webfolio/src/Assets/vectors/index.tsx":"16","/Users/victorpineda/repos/webfolio/src/Assets/icons/index.tsx":"17","/Users/victorpineda/repos/webfolio/src/Data/projects/research.ts":"18","/Users/victorpineda/repos/webfolio/src/Data/projects/happiibook.ts":"19","/Users/victorpineda/repos/webfolio/src/Data/projects/UIS.ts":"20","/Users/victorpineda/repos/webfolio/src/Data/projects/foodie.ts":"21","/Users/victorpineda/repos/webfolio/src/Components/sections/Footer.tsx":"22","/Users/victorpineda/repos/webfolio/src/Config/index.ts":"23","/Users/victorpineda/repos/webfolio/src/Config/Firebase.ts":"24","/Users/victorpineda/repos/webfolio/src/Components/ContactForm.tsx":"25","/Users/victorpineda/repos/webfolio/src/Components/ResumeForm.tsx":"26"},{"size":500,"mtime":1608842390333,"results":"27","hashOfConfig":"28"},{"size":452,"mtime":1608842390334,"results":"29","hashOfConfig":"28"},{"size":312,"mtime":1611308940315,"results":"30","hashOfConfig":"28"},{"size":1265,"mtime":1610856311143,"results":"31","hashOfConfig":"28"},{"size":1230,"mtime":1609865007974,"results":"32","hashOfConfig":"28"},{"size":454,"mtime":1610856417123,"results":"33","hashOfConfig":"28"},{"size":226,"mtime":1610856273434,"results":"34","hashOfConfig":"28"},{"size":5145,"mtime":1611350398573,"results":"35","hashOfConfig":"28"},{"size":1442,"mtime":1611348480599,"results":"36","hashOfConfig":"28"},{"size":1041,"mtime":1610855768504,"results":"37","hashOfConfig":"28"},{"size":6602,"mtime":1611010062226,"results":"38","hashOfConfig":"28"},{"size":7421,"mtime":1611603839960,"results":"39","hashOfConfig":"28"},{"size":1367,"mtime":1609737775943,"results":"40","hashOfConfig":"28"},{"size":5289,"mtime":1611268471098,"results":"41","hashOfConfig":"28"},{"size":146,"mtime":1608861476897,"results":"42","hashOfConfig":"28"},{"size":649,"mtime":1610855768461,"results":"43","hashOfConfig":"28"},{"size":891,"mtime":1610855768466,"results":"44","hashOfConfig":"28"},{"size":573,"mtime":1608861609343,"results":"45","hashOfConfig":"28"},{"size":775,"mtime":1608861618119,"results":"46","hashOfConfig":"28"},{"size":476,"mtime":1608860956932,"results":"47","hashOfConfig":"28"},{"size":758,"mtime":1609321299529,"results":"48","hashOfConfig":"28"},{"size":1086,"mtime":1610953079372,"results":"49","hashOfConfig":"28"},{"size":28,"mtime":1611119791685,"results":"50","hashOfConfig":"28"},{"size":946,"mtime":1611309420470,"results":"51","hashOfConfig":"28"},{"size":4328,"mtime":1611603148864,"results":"52","hashOfConfig":"28"},{"size":3441,"mtime":1611613374909,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"hvkqt4",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/victorpineda/repos/webfolio/src/index.tsx",[],[],"/Users/victorpineda/repos/webfolio/src/reportWebVitals.ts",[],"/Users/victorpineda/repos/webfolio/src/App.tsx",[],"/Users/victorpineda/repos/webfolio/src/Pages/Home.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/Parallax.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/ui/Layout.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/sections/index.ts",[],"/Users/victorpineda/repos/webfolio/src/Components/sections/Hero.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/sections/Projects.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/sections/Header.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/sections/Dexterity.tsx",["110"],"import React, { useContext } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { GiBiceps } from \"react-icons/gi\";\nimport { AiOutlineCode } from \"react-icons/ai\";\nimport {\n  Pi,\n  FirebaseIcon,\n  Sass,\n  Nx,\n  ReactIcon,\n  Scala,\n  Java,\n  Arduino,\n  Ts,\n  Ai,\n  Ps,\n  // Figma,\n} from \"../../Assets/icons\";\nimport { Wave } from \"../../Assets/vectors\";\nimport { ParallaxContext } from \"../Parallax\";\nimport gig from \"../../Assets/images/me2Back.png\";\n\ntype SVGIcon = React.FC<React.SVGProps<SVGSVGElement>>;\n\nexport const Dexterity: React.FC = () => {\n  const ParallaxAttributes = useContext(ParallaxContext);\n\n  // console.log(\"The YOFFSET::::\", ParallaxAttributes.yOffset);\n  // console.log(\"The viewport Width:::\", ParallaxAttributes.viewPort);\n  // console.log(\n  //   \"Transform::::\",\n  //   (ParallaxAttributes.yOffset / ParallaxAttributes.viewPort.width) * 100\n  // );\n\n  const DexSoftwareIcons = () => {\n    const icons = [\n      Pi,\n      Sass,\n      Scala,\n      Java,\n      Arduino,\n      Ts,\n      ReactIcon,\n      FirebaseIcon,\n      Nx,\n    ];\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap-reverse\",\n        }}\n      >\n        {icons.map((Icon: SVGIcon, index) => (\n          <Col\n            xs={4}\n            sm={2}\n            // md={4}\n            lg={2}\n            key={index}\n            style={{\n              // paddingLeft: \"15px\",\n              padding: \"10px\",\n              // width: \"6rem\",\n            }}\n          >\n            <Icon width=\"5rem\" height=\"5rem\" />\n          </Col>\n        ))}\n      </div>\n    );\n  };\n\n  const DexFrameworkIcons = (props: { icons: SVGIcon[] }) => {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap-reverse\",\n        }}\n      >\n        {props.icons.map((Icon: SVGIcon, index: number) => (\n          <Col\n            xs={4}\n            sm={3}\n            // md={4}\n            lg={4}\n            key={index}\n            style={{\n              // paddingLeft: \"15px\",\n              padding: \"10px\",\n              // width: \"6rem\",\n            }}\n          >\n            <Icon width=\"5rem\" height=\"5rem\" />\n          </Col>\n        ))}\n      </div>\n    );\n  };\n  return (\n    <Container\n      fluid\n      style={{\n        backgroundColor: \"black\",\n        // backgroundColor: \"#000d2a\",\n        marginBottom: \"30px\",\n        margin: \"0\",\n        padding: \"0\",\n        overflow: \"hidden\",\n        // height: \"100vh\",\n      }}\n    >\n      <Row>\n        <Col\n          xs={12}\n          sm={12}\n          md={12}\n          lg={12}\n          xl={12}\n          style={{\n            // backgroundColor: \"red\",\n            // transform: `translateY(-${ParallaxAttributes.yOffset / 2.5}px)`,\n            // marginTop: \"65rem\",\n            // height: \"20rem\",\n            marginTop: \"5rem\",\n            marginBottom: \"5rem\",\n          }}\n        >\n          <p\n            style={{\n              textAlign: \"center\",\n              color: \"white\",\n              fontSize: \"10vw\",\n              width: \"100%\",\n              fontFamily: \"OCRAExtended, OCR A Extended\",\n            }}\n          >\n            Dexterity\n          </p>\n          <div\n            style={{\n              margin: \"auto\",\n              display: \"flex\",\n              flexDirection: \"row\",\n              flexWrap: \"wrap\",\n              justifyContent: \"center\",\n              width: \"100%\",\n            }}\n          >\n            <GiBiceps\n              size=\"5rem\"\n              color=\"white\"\n              style={{\n                borderRadius: \"50%\",\n                backgroundColor: \"#00c5d4\",\n              }}\n            />\n          </div>\n        </Col>\n      </Row>\n      <Row\n        style={{\n          // backgroundColor: \"blue\",\n          marginLeft: \"2%\",\n          marginRight: \"2%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          margin: \"0\",\n          padding: \"0\",\n          width: \"100%\",\n          // marginTop: \"10rem\",\n          // backgroundColor: \"blue\",\n          // transform: `translateY(-${ParallaxAttributes.yOffset / 2.5}px)`,\n        }}\n      >\n        <Col\n          xs={12}\n          sm={12}\n          md={12}\n          lg={6}\n          xl={6}\n          style={{\n            height: \"40rem\",\n            overflow: \"hidden\",\n          }}\n        >\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"0\",\n            }}\n          >\n            <DexSoftwareIcons />\n          </div>\n          <div style={{ position: \"absolute\" }}>\n            <p\n              style={{\n                fontSize: \"3rem\",\n                fontFamily: \"OCRAExtended, OCR A Extended\",\n                textAlign: \"center\",\n                color: \"white\",\n              }}\n            >\n              Software\n            </p>\n          </div>\n          <AiOutlineCode\n            size=\"20rem\"\n            color=\"white\"\n            style={{\n              position: \"absolute\",\n              marginTop: \"3rem\",\n            }}\n          />\n          <Wave width=\"80rem\" style={{ marginLeft: \"-10rem\" }} />\n          <Wave\n            width=\"80rem\"\n            style={{ marginTop: \"-5rem\", marginLeft: \"-15rem\" }}\n          />\n        </Col>\n        <Col\n          xs={12}\n          sm={12}\n          md={12}\n          lg={6}\n          xl={6}\n          style={{\n            height: \"40rem\",\n            // maxHeight: \"35rem\",\n            overflow: \"hidden\",\n            // backgroundImage: `url(${gig})`,\n            // backgroundSize: \"100vh 100%\",\n          }}\n        >\n          <img\n            src={gig}\n            width=\"700px\"\n            height=\"700rem\"\n            style={{\n              position: \"absolute\",\n              // marginTop: \"-20rem\",\n              // marginLeft: \"-20rem\",\n              // float: \"right\",\n              right: \"-8rem\",\n              bottom: \"0\",\n            }}\n          />\n          <div\n            style={{\n              position: \"absolute\",\n              bottom: \"0\",\n            }}\n          >\n            <DexFrameworkIcons icons={[Ai, Ps]} />\n          </div>\n          <div style={{ position: \"absolute\" }}>\n            <p\n              style={{\n                fontSize: \"3rem\",\n                color: \"white\",\n                fontFamily: \"OCRAExtended, OCR A Extended\",\n                textAlign: \"center\",\n              }}\n            >\n              Design\n            </p>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n","/Users/victorpineda/repos/webfolio/src/Components/sections/Contact.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/ui/Drawer.tsx",[],"/Users/victorpineda/repos/webfolio/src/Components/ui/ProjectCard.tsx",["111","112","113","114","115"],"import React, { useState } from \"react\";\nimport { Col, Button } from \"react-bootstrap\";\nimport { useTransition, animated } from \"react-spring\";\nimport { IoMdArrowRoundUp, IoMdClose } from \"react-icons/io\";\nimport { Code, TechStack } from \"../../Assets/vectors\";\nimport { IconType } from \"react-icons\";\n\ntype FrameworkIcon = { icon: IconType; Framework: string };\ninterface ProjectCardProps {\n  data: any;\n}\n\nexport const ProjectCard: React.FC<ProjectCardProps> = (\n  props: ProjectCardProps\n) => {\n  const [info, toggle] = useState(false);\n\n  let projectData: any = {};\n  const project = props.data.map((data: any) => (projectData = data));\n  // console.log(\"Project Data:::\", project);\n\n  const transition = useTransition(info, null, {\n    config: {\n      duration: 450,\n    },\n    from: {\n      transform: \"translate3d(0, 0em, 0)\",\n      opacity: 0,\n      width: \"100%\",\n      backgroundColor: \"red\",\n      height: \"33rem\",\n      position: \"absolute\",\n      left: \"0\",\n      overflow: \"hidden\",\n    },\n    enter: {\n      transform: \"translate3d(0, -33em, 0)\",\n      opacity: 1,\n    },\n    leave: { transform: \"translate3d(0, 33rem, 0)\", opacity: 0 },\n  });\n\n  const ProjectDisplay = () => {\n    let gig = \"\";\n    props.data.map((item: any) => (gig = item.backgroundImg));\n    return (\n      <div\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n          backgroundImage: `url(${gig})`,\n          backgroundSize: \"100vh 100%\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        <p\n          style={{\n            color: \"white\",\n            fontSize: \"120px\",\n            fontFamily: \"sans-serif\",\n            overflow: \"hidden\",\n            fontWeight: \"bold\",\n          }}\n        >\n          {projectData.type}\n        </p>\n      </div>\n    );\n  };\n\n  const ProjectContent = () => {\n    return (\n      <div\n        style={{\n          backgroundColor: \"black\",\n          height: \"100%\",\n        }}\n      >\n        <div\n          style={{\n            float: \"left\",\n            width: \"50%\",\n            height: \"100%\",\n            backgroundColor: \"#000d2a\",\n          }}\n        >\n          <TechStack\n            style={{\n              width: \"100%\",\n              height: \"100%\",\n              marginTop: \"2.5rem\",\n            }}\n          />\n        </div>\n        <div\n          style={{\n            marginLeft: \"50%\",\n            height: \"100vh\",\n            opacity: \"60%\",\n          }}\n        >\n          <Code />\n        </div>\n        {projectData.icons.map((Icon: FrameworkIcon, index: number) => (\n          <div\n            key={index}\n            style={{\n              position: \"absolute\",\n              top: `${(0 + index) * 20}%`,\n              right: \"0\",\n              backgroundColor: \"black\",\n              padding: \"10px\",\n              paddingRight: `${100 / (index + 1 * 2)}%`,\n              borderTopLeftRadius: \"50px\",\n              borderBottomLeftRadius: \"50px\",\n              display: \"flex\",\n              boxShadow: \"-5px 2px 0px #004FFF\",\n            }}\n          >\n            <Icon.icon\n              size=\"3rem\"\n              style={{\n                fill: \"#000d2a\",\n                backgroundColor: \"#ff592e\",\n                borderRadius: \"50%\",\n                padding: \"5px\",\n                marginRight: \"10px\",\n              }}\n            />\n            <p\n              style={{\n                margin: \"auto\",\n                color: \"white\",\n                letterSpacing: \"1px\",\n              }}\n            >\n              {Icon.Framework}\n            </p>\n          </div>\n        ))}\n      </div>\n    );\n  };\n  return (\n    <Col\n      xs={12}\n      sm={12}\n      md={6}\n      style={{\n        backgroundColor: \"black\",\n        height: \"33rem\",\n        left: \"0\",\n        border: \"1px solid black\",\n        margin: \"0\",\n        padding: \"0\",\n        // zIndex: 1,\n      }}\n    >\n      <ProjectDisplay />\n      {transition.map(\n        ({ item, key, props }) =>\n          item && (\n            <Col key={key} sm={12}>\n              <animated.div key={key} style={props}>\n                <ProjectContent />\n              </animated.div>\n            </Col>\n          )\n      )}\n      <Button\n        style={{\n          position: \"absolute\",\n          right: \"0\",\n          bottom: \"0\",\n          // zIndex: 1,\n          margin: \"10px\",\n          borderRadius: \"50px\",\n          // width: \"10rem\",\n          width: info ? \"2.7rem\" : \"10rem\",\n          height: \"2.7rem\",\n          backgroundColor: \"black\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          border: \"2px solid\",\n          borderColor: \"white\",\n        }}\n        onClick={() => toggle(!info)}\n      >\n        {!info && (\n          <p\n            style={{ margin: \"auto\", fontWeight: \"bold\", letterSpacing: \"1px\" }}\n          >\n            Tech Stack\n          </p>\n        )}\n        <div\n          style={{\n            right: \"0\",\n            bottom: \"0\",\n            borderRadius: \"50%\",\n            width: \"2rem\",\n            height: \"2rem\",\n            display: \"flex\",\n          }}\n        >\n          {/* TODO: Animate icons to fade in and out */}\n          {info ? <IoMdClose size=\"2rem\" /> : <IoMdArrowRoundUp size=\"2rem\" />}\n        </div>\n      </Button>\n    </Col>\n  );\n};\n","/Users/victorpineda/repos/webfolio/src/Data/projects/index.ts",[],"/Users/victorpineda/repos/webfolio/src/Assets/vectors/index.tsx",[],"/Users/victorpineda/repos/webfolio/src/Assets/icons/index.tsx",[],"/Users/victorpineda/repos/webfolio/src/Data/projects/research.ts",[],"/Users/victorpineda/repos/webfolio/src/Data/projects/happiibook.ts",[],"/Users/victorpineda/repos/webfolio/src/Data/projects/UIS.ts",[],"/Users/victorpineda/repos/webfolio/src/Data/projects/foodie.ts",[],"/Users/victorpineda/repos/webfolio/src/Components/sections/Footer.tsx",[],"/Users/victorpineda/repos/webfolio/src/Config/index.ts",[],"/Users/victorpineda/repos/webfolio/src/Config/Firebase.ts",[],"/Users/victorpineda/repos/webfolio/src/Components/ContactForm.tsx",["116","117"],"import React, { useState } from \"react\";\nimport { Button, Form, Col } from \"react-bootstrap\";\nimport { IoMdClose } from \"react-icons/io\";\nimport firebase from \"firebase/app\";\nimport \"firebase/functions\";\n\ninterface ContactFormFields {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n}\n\ninterface ContactProps {\n  toggleForm: () => void;\n}\n\nexport const ContactForm: React.FC<ContactProps> = (props) => {\n  const [contactFormFields, setFormFields] = useState<ContactFormFields>({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\",\n  });\n  // FIXME: Use types\n  // React.FormEvent<HTMLFormElement>\n  // SyntheticBaseEvent\n  const submitContactForm = (event: any) => {\n    event.preventDefault();\n    const { name, email, subject, message } = event.target.elements;\n    const data = {\n      name: name.value,\n      email: email.value,\n      subject: subject.value,\n      message: message.value,\n    };\n\n    console.log(\"Calling onSubmit with::::\", data);\n    const sendEmails = firebase.functions().httpsCallable(\"contact\");\n    console.log(\"Got the email VAR\");\n    sendEmails(data)\n      .then(() => {\n        console.log(\"About to clear the form\");\n        const resetForm = { name: \"\", email: \"\", subject: \"\", message: \"\" };\n        setFormFields(resetForm);\n      })\n      .catch((error) => {\n        console.log(\"The email was not able to send::::\", error);\n      });\n  };\n\n  const handleInputChange = (event: any) => {\n    event.preventDefault();\n    const name = event.target.name;\n    const value = event.target.value;\n    setFormFields((prevState) => {\n      const data = Object.assign({}, prevState);\n      const newData = Object.assign(data, { ...data, [name]: value });\n      return newData;\n    });\n\n    console.log(\"After setting state\");\n  };\n  return (\n    <Col\n      xs={12}\n      sm={12}\n      md={12}\n      lg={12}\n      xl={12}\n      style={{\n        height: \"100%\",\n        borderRadius: \"25px\",\n        margin: \"auto\",\n        top: \"0\",\n      }}\n    >\n      <Button\n        style={{\n          width: \"3rem\",\n          height: \"3rem\",\n          float: \"right\",\n          marginBottom: \"10px\",\n          border: \"2px solid white\",\n          backgroundColor: \"black\",\n          borderRadius: \"25px\",\n          marginRight: \"3%\",\n        }}\n        onClick={props.toggleForm}\n      >\n        <IoMdClose size=\"2rem\" style={{ marginLeft: \"-5px\" }} />\n      </Button>\n      <Form\n        id=\"ContactForm\"\n        onSubmit={submitContactForm}\n        style={{\n          maxWidth: \"35rem\",\n          margin: \"auto\",\n          marginTop: \"15px\",\n        }}\n      >\n        <Form.Group controlId=\"name\">\n          <Form.Control\n            onChange={(e) => handleInputChange(e)}\n            type=\"name\"\n            name=\"name\"\n            placeholder=\"Name\"\n            value={contactFormFields.name}\n          />\n        </Form.Group>\n        <Form.Group controlId=\"email\">\n          <Form.Text\n            style={{\n              color: \"white\",\n              letterSpacing: \"1.5px\",\n              paddingBottom: \"3px\",\n              paddingLeft: \"2.5px\",\n            }}\n          >\n            {\"Your email will NOT be shared with anyone else.\"}\n          </Form.Text>\n          <Form.Control\n            type=\"email\"\n            name=\"email\"\n            onChange={(e) => handleInputChange(e)}\n            placeholder=\"Email\"\n            value={contactFormFields.email}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"subject\">\n          <Form.Control\n            type=\"subject\"\n            name=\"subject\"\n            placeholder=\"Subject\"\n            value={contactFormFields.subject}\n            onChange={(e) => handleInputChange(e)}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"message\">\n          <Form.Control\n            as=\"textarea\"\n            name=\"message\"\n            rows={3}\n            placeholder=\"Message\"\n            value={contactFormFields.message}\n            onChange={(e) => handleInputChange(e)}\n          />\n        </Form.Group>\n        <Button\n          style={{\n            marginLeft: \"2%\",\n            backgroundColor: \"black\",\n            border: \"2px solid white\",\n          }}\n          variant=\"primary\"\n          type=\"submit\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </Col>\n  );\n};\n","/Users/victorpineda/repos/webfolio/src/Components/ResumeForm.tsx",["118"],{"ruleId":"119","severity":1,"message":"120","line":26,"column":9,"nodeType":"121","messageId":"122","endLine":26,"endColumn":27},{"ruleId":"123","severity":1,"message":"124","line":10,"column":9,"nodeType":"125","messageId":"126","endLine":10,"endColumn":12,"suggestions":"127"},{"ruleId":"123","severity":1,"message":"124","line":18,"column":20,"nodeType":"125","messageId":"126","endLine":18,"endColumn":23,"suggestions":"128"},{"ruleId":"119","severity":1,"message":"129","line":19,"column":9,"nodeType":"121","messageId":"122","endLine":19,"endColumn":16},{"ruleId":"123","severity":1,"message":"124","line":19,"column":41,"nodeType":"125","messageId":"126","endLine":19,"endColumn":44,"suggestions":"130"},{"ruleId":"123","severity":1,"message":"124","line":45,"column":27,"nodeType":"125","messageId":"126","endLine":45,"endColumn":30,"suggestions":"131"},{"ruleId":"123","severity":1,"message":"124","line":28,"column":37,"nodeType":"125","messageId":"126","endLine":28,"endColumn":40,"suggestions":"132"},{"ruleId":"123","severity":1,"message":"124","line":52,"column":37,"nodeType":"125","messageId":"126","endLine":52,"endColumn":40,"suggestions":"133"},{"ruleId":"123","severity":1,"message":"124","line":34,"column":37,"nodeType":"125","messageId":"126","endLine":34,"endColumn":40,"suggestions":"134"},"@typescript-eslint/no-unused-vars","'ParallaxAttributes' is assigned a value but never used.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["135","136"],["137","138"],"'project' is assigned a value but never used.",["139","140"],["141","142"],["143","144"],["145","146"],["147","148"],{"messageId":"149","fix":"150","desc":"151"},{"messageId":"152","fix":"153","desc":"154"},{"messageId":"149","fix":"155","desc":"151"},{"messageId":"152","fix":"156","desc":"154"},{"messageId":"149","fix":"157","desc":"151"},{"messageId":"152","fix":"158","desc":"154"},{"messageId":"149","fix":"159","desc":"151"},{"messageId":"152","fix":"160","desc":"154"},{"messageId":"149","fix":"161","desc":"151"},{"messageId":"152","fix":"162","desc":"154"},{"messageId":"149","fix":"163","desc":"151"},{"messageId":"152","fix":"164","desc":"154"},{"messageId":"149","fix":"165","desc":"151"},{"messageId":"152","fix":"166","desc":"154"},"suggestUnknown",{"range":"167","text":"168"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"167","text":"169"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"170","text":"168"},{"range":"170","text":"169"},{"range":"171","text":"168"},{"range":"171","text":"169"},{"range":"172","text":"168"},{"range":"172","text":"169"},{"range":"173","text":"168"},{"range":"173","text":"169"},{"range":"174","text":"168"},{"range":"174","text":"169"},{"range":"175","text":"168"},{"range":"175","text":"169"},[400,403],"unknown","never",[560,563],[610,613],[1237,1240],[691,694],[1448,1451],[1023,1026]]